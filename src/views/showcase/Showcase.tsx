import { useEffect, useRef } from "react"
import InfoBar from "../../components/InfoBar"
import StudioCanvas from "../../components/StudioCanvas"
import { useStudio } from "../../contexts/StudioContext"
import ShowcaseView from "../../studio/showcase/ShowcaseView"
import { useListenableObject } from "../../studio/util/ListenableObject"
import { useObjectUnderMouse } from "../../studio/util/ObjectClickedHook"
import AnimatorGumballPropertiesBar from "../animator/components/AnimatorGumballPropertiesBar"
import AnimatorTabBar from "../animator/components/AnimatorTabBar"
import ShowcaseSidebar from "./components/ShowcaseSidebar"
import { useShowcaseGumball } from "./logic/ShowcaseGumball"

const Showcase = () => {
  const { scene, lightGroup, itemsGroup, getSelectedProject, onFrameListeners, renderer, controls, getCamera } = useStudio()
  const project = getSelectedProject()

  const [allViews, setViews] = useListenableObject(project.showcaseProperties.views)
  const [view] = useListenableObject(project.showcaseProperties.selectedView)

  useObjectUnderMouse()
  useShowcaseGumball()

  //TODO: get three context and listen on orbit controls for a change, then update the view's camera position and target
  //Also, in the view add a listener to update the orbit controls when view#position/target changes 

  const hasCameraAlreadyUpdated = useRef(false)

  useEffect(() => {

    const updatePosition = (position = view.cameraPosition.value) => {
      if (hasCameraAlreadyUpdated.current) {
        return
      }
      const camera = getCamera()
      camera.position.set(position[0], position[1], position[2])
      controls.update()
    }
    const updateTarget = (target = view.cameraTarget.value) => {
      if (hasCameraAlreadyUpdated.current) {
        return
      }
      controls.target.set(target[0], target[1], target[2])
      controls.update()
    }

    const onControlsChange = () => {
      const camera = getCamera()
      hasCameraAlreadyUpdated.current = true
      view.cameraPosition.value = [camera.position.x, camera.position.y, camera.position.z]
      view.cameraTarget.value = [controls.target.x, controls.target.y, controls.target.z]
      hasCameraAlreadyUpdated.current = false
    }

    controls.addEventListener('change', onControlsChange)
    view.cameraPosition.addAndRunListener(updatePosition)
    view.cameraTarget.addAndRunListener(updateTarget)
    return () => {
      controls.removeEventListener('change', onControlsChange)
      view.cameraPosition.removeListener(updatePosition)
      view.cameraTarget.removeListener(updateTarget)
    }


  }, [view, getCamera, controls])

  useEffect(() => {
    scene.remove(lightGroup)
    scene.remove(itemsGroup)
    scene.add(project.showcaseProperties.group)
    renderer.shadowMap.enabled = true
    const onFrame = () => {
      view.renderForGumball()
    }
    onFrameListeners.add(onFrame)

    return () => {
      scene.add(lightGroup)
      scene.add(itemsGroup)
      scene.remove(project.showcaseProperties.group)
      renderer.shadowMap.enabled = false

      onFrameListeners.delete(onFrame)
    }
  }, [view, scene, lightGroup, itemsGroup, project, renderer, onFrameListeners])

  const newView = () => {
    const view = new ShowcaseView(project.showcaseProperties)
    setViews([...allViews, view])
  }

  return (
    <div className="h-full grid grid-areas-showcase"
      key={project.identifier}
      style={{
        //These would be generated by moving the panels around.
        //For now, we just hardcode them
        gridTemplateColumns: 'auto 300px',
        gridTemplateRows: '32px auto 30px 28px'
      }}
    >
      <div className="grid-in-tabs border dark:border-black border-white">
        <AnimatorTabBar
          all={allViews}
          selected={project.showcaseProperties.selectedView as any /** More annoying casting. TODO: look at fixing this */}
          createNew={newView}
        /></div>
      <div className="grid-in-canvas border dark:border-black border-white min-h-0"><StudioCanvas /></div>
      <div className="grid-in-info border dark:border-black border-white"><InfoBar /></div>
      <div className="grid-in-gumball border dark:border-black border-white"><AnimatorGumballPropertiesBar consumer={view} /></div>
      <div className="grid-in-sidebar border dark:border-black border-white"><ShowcaseSidebar /></div>
    </div>
  )
}



export default Showcase;